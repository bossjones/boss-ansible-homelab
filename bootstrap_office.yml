# ansible-playbook -i inventory-homelab/ bootstrap_office.yml --check
# ansible-playbook -i inventory-homelab/ bootstrap_office.yml
# ansible-playbook -i inventory-homelab/ bootstrap_office.yml --tags "scarlett_ids"
---
- hosts: netdata_registry
  gather_facts: True
  become: yes
  become_method: sudo
  tags:
    - netdata_registry
  vars:
    netdata_registry_enabled: True
    netdata_registry_to_announce: "http://{{ netdata_stream_master_node }}:{{ netdata_default_port }}"
    pri_domain_name: scarlett-office.local
    netdata_stream_enabled: True
    netdata_stream_api_key: 70C1DAF7-C0F5-4D07-908F-7C5CAB0A0236
    netdata_stream_master_node: 192.168.1.191
    nginx_listen_port: 8080
  roles:
    - role: ansible-nginx
      nginx_listen_port: 8080
    - role: ansible-netdata
    - role: ansible-snmpd
  tasks:
    - name: "create /etc/nginx/sites-available/netdata"
      copy:
        content: |

          upstream backend {
              server 127.0.0.1:19999;
              keepalive 1024;
          }

          server {
              listen *:8080;
              server_name my.web.server.name;

              location / {
                  proxy_set_header X-Forwarded-Host $host;
                  proxy_set_header X-Forwarded-Server $host;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_pass http://backend;
                  proxy_http_version 1.1;
                  proxy_pass_request_headers on;
                  proxy_set_header Connection "keep-alive";
                  proxy_store off;
                  gzip on;
                  gzip_proxied any;
                  gzip_types *;

                  # Block any HTTP requests other than GET, HEAD, and OPTIONS
                  limit_except GET HEAD OPTIONS {
                      deny all;
                  }
              }

              # WordPress Pingback Request Denial
              if ($http_user_agent ~* "WordPress") {
                  return 403;
              }

          }


        dest: "/etc/nginx/sites-available/netdata"
        owner: "root"
        group: "root"
        mode: 0644

    - name: 'Create symlink for /etc/nginx/sites-enabled/netdata'
      file:
        src: "/etc/nginx/sites-available/netdata"
        dest: "/etc/nginx/sites-enabled/netdata"
        state: link

    - name: "get line of global"
      shell: 'grep -n "\[global\]" /etc/netdata/netdata.conf | cut -d: -f1'
      become: yes
      register: global_linenumber

    - name: "sed disconnect idle web clients after seconds = 3600"
      shell: |
        file /opt/netdata.lock
      register: netdata_lock
      become: yes

    - name: "sed bind socket to IP = 127.0.0.1"
      shell: |
        sed -i '{{global_linenumber.stdout}}a\        bind socket to IP = 127.0.0.1' /etc/netdata/netdata.conf
      become: yes
      when: netdata_lock.stdout.find("No such file or directory") != -1

    - name: "sed disconnect idle web clients after seconds = 3600"
      shell: |
        sed -i '{{global_linenumber.stdout}}a\        disconnect idle web clients after seconds = 3600' /etc/netdata/netdata.conf
      become: yes
      when: netdata_lock.stdout.find("No such file or directory") != -1

    - name: "sed enable web responses gzip compression = no"
      shell: |
        sed -i '{{global_linenumber.stdout}}a\        enable web responses gzip compression = no' /etc/netdata/netdata.conf
      become: yes
      when: netdata_lock.stdout.find("No such file or directory") != -1

    - name: "file limits /etc/security/limits.d/nginx.conf"
      copy:
        content: |
          nginx   soft    nofile  10000
          nginx   hard    nofile  30000
        dest: "/etc/security/limits.d/nginx.conf"
        owner: "root"
        group: "root"
        mode: 0644

    - name: "file limits /etc/security/limits.d/netdata.conf"
      copy:
        content: |
          netdata   soft    nofile  10000
          netdata   hard    nofile  30000
        dest: "/etc/security/limits.d/netdata.conf"
        owner: "root"
        group: "root"
        mode: 0644

    - name: "Create directory: /etc/systemd/system/netdata.service.d"
      file:
        path: "/etc/systemd/system/netdata.service.d"
        state: directory
        owner: "root"
        group: "root"

    - name: "Create directory: /etc/systemd/system/nginx.service.d"
      file:
        path: "/etc/systemd/system/nginx.service.d"
        state: directory
        owner: "root"
        group: "root"


    - name: "file limits /etc/systemd/system/nginx.service.d/limits.conf"
      copy:
        content: |
          [Service]
          LimitNOFILE=30000
        dest: "/etc/systemd/system/nginx.service.d/limits.conf"
        owner: "root"
        group: "root"
        mode: 0644

    - name: "file limits /etc/systemd/system/netdata.service.d/limits.conf"
      copy:
        content: |
          [Service]
          LimitNOFILE=30000
        dest: "/etc/systemd/system/netdata.service.d/limits.conf"
        owner: "root"
        group: "root"
        mode: 0644

    - name: reload systemd configuration
      become: yes
      command: systemctl daemon-reload

    # Restart service and ensure it is enabled
    - name: start and enable nginx
      become: yes
      service: name=nginx state=restarted enabled=yes

    - name: start and enable netdata
      become: yes
      service: name=netdata state=restarted enabled=yes


# sudo apt-get install unifi oracle-java8-jdk -y
# sudo usermod -aG docker your-user
# root@scarlett-office:~# history
#     1  apt-get install mlocate -y
#     2  updatedb
#     3  mlocate nginx
#     4  cd /etc/nginx/
#     5  ls
#     6  ls -lta
#     7  cd conf.d/
#     8  ls
#     9  cd ..
#    10  vim nginx.conf
#    11  apt-get install vim -y
#    12  vim nginx.conf
#    13  ls
#    14  ls -lta
#    15  cd sites-available/
#    16  ls
#    17  vim default
#    18  vim default
#    19  netstat -an | less
#    20  netstat -an | less
#    21  vim /etc/netdata/netdata.conf
#    22  ll /etc/security/limits.d/
#    23  ls /etc/security/limits.d/

#   1  clear
#   2  apt-get update
#   3  apt-get install ccze -y
#   4  exit
#   5  netstat -an
#   6  netstat -an | less
#   7  ps aux | grep 80
#   8  ps aux | grep apache
#   9  tail -f /var/log/messages | ccze -A
#  10  journalctl -f
#  11  journalctl -f | ccze
#  12  tail -f /var/log/messages | ccze -A
#  13  mkdir /usr/share/ca-certificates/local
#  14  cd /usr/share/ca-certificates/local
#  15  wget https://entrust.com/root-certificates/entrust_l1k.cer
#  16  openssl x509 -inform PEM  -in entrust_l1k.cer -outform PEM -out entrust_l1k.crt
#  17  dpkg-reconfigure ca-certificates
#  18  curl -sSL https://get.docker.com | sh
#  19  date
#  20  sudo apt-get update && sudo apt-get install -y --reinstall ca-certificates
#  21  curl -sSL https://get.docker.com | sh
#  22  dpkg-reconfigure ca-certificates
#  23  curl -sSL https://get.docker.com | sh
#  24  clear
#  25  clear
#  26  dpkg -l | grep libssl
#  27  apt-get remove libssl1.0.2
#  28  clear
#  29  apt-get install -y --reinstall curl
#  30  curl -sSL https://get.docker.com | sh
#  31  update-ca-certificates --fresh
#  32  apt-get install -y mlocate
#  33  updatedb
#  34  mlocate nginx
#  35  history




  #   1  clear
  #   2  apt-get update
  #   3  apt-get install ccze -y
  #   4  exit
  #   5  netstat -an
  #   6  netstat -an | less
  #   7  ps aux | grep 80
  #   8  ps aux | grep apache
  #   9  tail -f /var/log/messages | ccze -A
  #  10  journalctl -f
  #  11  journalctl -f | ccze
  #  12  tail -f /var/log/messages | ccze -A
  #  13  mkdir /usr/share/ca-certificates/local
  #  14  cd /usr/share/ca-certificates/local
  #  15  wget https://entrust.com/root-certificates/entrust_l1k.cer
  #  16  openssl x509 -inform PEM  -in entrust_l1k.cer -outform PEM -out entrust_l1k.crt
  #  17  dpkg-reconfigure ca-certificates
  #  18  curl -sSL https://get.docker.com | sh
  #  19  date
  #  20  sudo apt-get update && sudo apt-get install -y --reinstall ca-certificates
  #  21  curl -sSL https://get.docker.com | sh
  #  22  dpkg-reconfigure ca-certificates
  #  23  curl -sSL https://get.docker.com | sh
  #  24  clear
  #  25  clear
  #  26  dpkg -l | grep libssl
  #  27  apt-get remove libssl1.0.2
  #  28  clear
  #  29  apt-get install -y --reinstall curl
  #  30  curl -sSL https://get.docker.com | sh
  #  31  update-ca-certificates --fresh
  #  32  apt-get install -y mlocate
  #  33  updatedb
  #  34  mlocate nginx
  #  35  history

##########################################################################################################################################
# Enable netdata etc on our ids server as well
##########################################################################################################################################

- hosts: scarlett_ids
  gather_facts: True
  become: yes
  become_method: sudo
  tags:
    - scarlett_ids
  vars:
    bossjones__user: "pi"
    bossjones__group: "pi"
    netdata_registry_enabled: False
    netdata_registry_to_announce: "http://{{ netdata_stream_master_node }}:{{ netdata_default_port }}"
    pri_domain_name: scarlett-ids.local
    netdata_stream_enabled: True
    netdata_stream_api_key: 70C1DAF7-C0F5-4D07-908F-7C5CAB0A0236
    netdata_stream_master_node: 192.168.1.191
    nginx_listen_port: 8080
  pre_tasks:

    # Update apt packages
    - name: Update apt packages
      become: yes
      apt:
        update_cache=yes

    # Upgrade apt packages
    - name: Upgrade apt packages
      become: yes
      apt:
        upgrade=dist

    - name: Upgrade apt packages
      become: yes
      apt:
        name=rpi-update
        state=present

    - name: run rpi-update
      shell: 'DEBIAN_FRONTEND=noninteractive rpi-update'
      become: yes
      register: rpi_update_results

    - name: 'run locale-gen en_US.UTF-8'
      shell: 'DEBIAN_FRONTEND=noninteractive locale-gen en_US.UTF-8'
      become: yes
      register: local_gen_results

    - name: debian | Installing Pre-Reqs
      apt:
        name: "{{ item }}"
        state: present
      become: True
      with_items:
        - asciidoc
        - atop
        - bash
        - bash-completion
        - binutils-dev
        - bison
        - bridge-utils
        - build-essential
        - ca-certificates
        - ccze
        - clang-3.5
        - collectl
        - dstat
        - elfutils
        - file
        - flex
        - gettext
        - git
        - hdparm
        - htop
        - iftop
        - iotop
        - iperf
        - iperf3
        - iproute
        - libaudit-dev
        - libdw-dev
        - libelf-dev
        - libgtk2.0-dev
        - libnuma-dev
        - libperl-dev
        - libslang2-dev
        - libunwind8
        - libunwind8-dev
        - llvm-3.5
        - lsof
        - ltrace
        - make
        - mercurial
        - mtr
        - ncurses
        - net-tools
        - ngrep
        - nmap
        - nmon
        - ntpdate
        - on-dev
        - perf
        - perf-tools-unstable
        - perl
        - perl-Getopt-Long.noarch
        - perl-Time-HiRes
        - procps
        - procps-ng
        - psmisc
        - pv
        - pyth
        - python-dev
        - python-software-properties
        - qperf
        - ruby2.3
        - sh-completion
        - socat
        - software-properties-common
        - sos
        - speedtest-cli
        - sslscan
        - strace
        - sysstat
        - tar
        - tcpdump
        - top
        - tree
        - vim
        - wget
        - mlocate
        - ncdu

        # apt-get -y install linux-headers-$(uname -r)
        # cd /usr/local/bin && wget https://github.com/direnv/direnv/releases/download/v2.13.3/direnv.linux-arm && mv direnv.linux-arm direnv && chmod +x direnv

  roles:
    - role: boss-ansible-role-swapfile
    - role: ansible-timezone
      timezone: 'America/New_York'
      timezone_update_hardware_clock: False
    - role: ansible-ntp
      # defaults file for ansible-ntp
      # Defines if host is ntp_master
      # set ntp_master to true on specific group_vars/group
      ntp_master: False

      # Define your ntp_master_servers
      ntp_master_servers:
        - 0.ubuntu.pool.ntp.org
        - 1.ubuntu.pool.ntp.org
        - 2.ubuntu.pool.ntp.org
        - 3.ubuntu.pool.ntp.org

      # Defines your primary domain name (FQDN)
      ntp_pri_domain_name: 'localdomain'

      # Defines internal ntp servers for clients to poll
      # ntp_servers:
      #  - 'ntp1.{{ ntp_pri_domain_name }}'
      #  - 'ntp2.{{ ntp_pri_domain_name }}'

    - role: ansible-nginx
      nginx_listen_port: 8080
    - role: ansible-netdata
    - role: ansible-snmpd
    - role: ansible-rsyslog
    - role: ansible-motd
    - role: boss-ansible-role-debug
  tasks:
    - name: "create /etc/nginx/sites-available/netdata"
      copy:
        content: |

          upstream backend {
              server 127.0.0.1:19999;
              keepalive 1024;
          }

          server {
              listen *:8080;
              server_name my.web.server.name;

              location / {
                  proxy_set_header X-Forwarded-Host $host;
                  proxy_set_header X-Forwarded-Server $host;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_pass http://backend;
                  proxy_http_version 1.1;
                  proxy_pass_request_headers on;
                  proxy_set_header Connection "keep-alive";
                  proxy_store off;
                  gzip on;
                  gzip_proxied any;
                  gzip_types *;

                  # Block any HTTP requests other than GET, HEAD, and OPTIONS
                  limit_except GET HEAD OPTIONS {
                      deny all;
                  }
              }

              # WordPress Pingback Request Denial
              if ($http_user_agent ~* "WordPress") {
                  return 403;
              }

          }


        dest: "/etc/nginx/sites-available/netdata"
        owner: "root"
        group: "root"
        mode: 0644

    - name: 'Create symlink for /etc/nginx/sites-enabled/netdata'
      file:
        src: "/etc/nginx/sites-available/netdata"
        dest: "/etc/nginx/sites-enabled/netdata"
        state: link

    - name: "get line of global"
      shell: 'grep -n "\[global\]" /etc/netdata/netdata.conf | cut -d: -f1'
      become: yes
      register: global_linenumber

    - name: "sed disconnect idle web clients after seconds = 3600"
      shell: |
        file /opt/netdata.lock
      register: netdata_lock
      become: yes

    - name: "sed bind socket to IP = 127.0.0.1"
      shell: |
        sed -i '{{global_linenumber.stdout}}a\        bind socket to IP = 127.0.0.1' /etc/netdata/netdata.conf
      become: yes
      when: netdata_lock.stdout.find("No such file or directory") != -1

    - name: "sed disconnect idle web clients after seconds = 3600"
      shell: |
        sed -i '{{global_linenumber.stdout}}a\        disconnect idle web clients after seconds = 3600' /etc/netdata/netdata.conf
      become: yes
      when: netdata_lock.stdout.find("No such file or directory") != -1

    - name: "sed enable web responses gzip compression = no"
      shell: |
        sed -i '{{global_linenumber.stdout}}a\        enable web responses gzip compression = no' /etc/netdata/netdata.conf
      become: yes
      when: netdata_lock.stdout.find("No such file or directory") != -1

    - name: "file limits /etc/security/limits.d/nginx.conf"
      copy:
        content: |
          nginx   soft    nofile  10000
          nginx   hard    nofile  30000
        dest: "/etc/security/limits.d/nginx.conf"
        owner: "root"
        group: "root"
        mode: 0644

    - name: "file limits /etc/security/limits.d/netdata.conf"
      copy:
        content: |
          netdata   soft    nofile  10000
          netdata   hard    nofile  30000
        dest: "/etc/security/limits.d/netdata.conf"
        owner: "root"
        group: "root"
        mode: 0644

    - name: "Create directory: /etc/systemd/system/netdata.service.d"
      file:
        path: "/etc/systemd/system/netdata.service.d"
        state: directory
        owner: "root"
        group: "root"

    - name: "Create directory: /etc/systemd/system/nginx.service.d"
      file:
        path: "/etc/systemd/system/nginx.service.d"
        state: directory
        owner: "root"
        group: "root"


    - name: "file limits /etc/systemd/system/nginx.service.d/limits.conf"
      copy:
        content: |
          [Service]
          LimitNOFILE=30000
        dest: "/etc/systemd/system/nginx.service.d/limits.conf"
        owner: "root"
        group: "root"
        mode: 0644

    - name: "file limits /etc/systemd/system/netdata.service.d/limits.conf"
      copy:
        content: |
          [Service]
          LimitNOFILE=30000
        dest: "/etc/systemd/system/netdata.service.d/limits.conf"
        owner: "root"
        group: "root"
        mode: 0644

    - name: reload systemd configuration
      become: yes
      command: systemctl daemon-reload

    # Restart service and ensure it is enabled
    - name: start and enable nginx
      become: yes
      service: name=nginx state=restarted enabled=yes

    - name: start and enable netdata
      become: yes
      service: name=netdata state=restarted enabled=yes

    - name: updatedb
      shell: 'updatedb'
      become: yes
      register: updatedb
